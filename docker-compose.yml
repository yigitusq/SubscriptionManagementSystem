services:

  # 1. ALTYAPI SERVİSLERİ ----------------------------------
  postgres_db:
    image: postgres:16
    container_name: postgres_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - customer-service-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.3
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - customer-service-network

  kafka:
    image: confluentinc/cp-kafka:7.5.3
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    networks:
      - customer-service-network

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - postgres_db
    networks:
      - customer-service-network

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - customer-service-network

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - customer-service-network

  # 2. MİKROSERVİSLER ----------------------------------
  discovery-service:
    build:
      context: .
      dockerfile: discovery-service/discovery-service/Dockerfile
    container_name: discovery-service
    ports:
      - "8761:8761"
    depends_on:
      - postgres_db
    networks:
      - customer-service-network
  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    container_name: api-gateway
    ports:
      - "8080:8080"
    depends_on:
      - discovery-service
      - postgres_db
    networks:
      - customer-service-network
  customer-service:
    build:
      context: .
      dockerfile: customer-service/Dockerfile
    container_name: customer-service
    ports:
      - "8081:8081"
    environment:
      spring.datasource.password: 123
    depends_on:
      - discovery-service
      - postgres_db
      - kafka
      - redis
    networks:
      - customer-service-network
  subscription-service:
    build:
      context: .
      dockerfile: subscription-service/subscription-service/Dockerfile
    container_name: subscription-service
    ports:
      - "8082:8082"
    environment:
      spring.datasource.password: 123
    depends_on:
      - discovery-service
      - postgres_db
      - kafka
      - redis
    networks:
      - customer-service-network
  payment-service:
    build:
      context: .
      dockerfile: payment-service/payment-service/Dockerfile
    container_name: payment-service
    ports:
      - "8083:8083"
    depends_on:
      - discovery-service
      - postgres_db
      - kafka
      - redis
    networks:
      - customer-service-network
  notification-service:
    build:
      context: .
      dockerfile: notification-service/notification-service/Dockerfile
    container_name: notification-service
    ports:
      - "8084:8084"
    depends_on:
      - discovery-service
      - postgres_db
      - kafka
      - redis
    networks:
      - customer-service-network


volumes:
  postgres_data:
  redis_data:

networks:
  customer-service-network:
    driver: bridge